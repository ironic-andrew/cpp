#include <iostream>
#include <vector>
#include <algorithm> // –¥–ª—è sort
using namespace std;

class BoolMatrix {
private:
    int n, m;
    vector<vector<bool>> data;

public:
    // 1Ô∏è‚É£ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    BoolMatrix() : n(0), m(0) {}

    // 2Ô∏è‚É£ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    BoolMatrix(int rows, int cols) : n(rows), m(cols) {
        data.assign(n, vector<bool>(m, false)); // —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –Ω—É–ª—è–º–∏
    }

    // 3Ô∏è‚É£ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
    BoolMatrix(const BoolMatrix &B) {
        n = B.n;
        m = B.m;
        data = B.data;
    }

    // üîπ –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –≤—Ä—É—á–Ω—É
    void set(int i, int j, bool value) {
        if (i >= 0 && i < n && j >= 0 && j < m)
            data[i][j] = value;
    }

    // üîπ –í–∏–≤—ñ–¥
    void print() const {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++)
                cout << data[i][j] << " ";
            cout << endl;
        }
        cout << endl;
    }

    // 4Ô∏è‚É£ –î–∏–∑‚Äô—é–Ω–∫—Ü—ñ—è (–ª–æ–≥—ñ—á–Ω–µ "–∞–±–æ")
    BoolMatrix operator|(const BoolMatrix &B) const {
        BoolMatrix result(n, m);
        for (int i = 0; i < n; i++)
            for (int j = 0; j < m; j++)
                result.data[i][j] = data[i][j] || B.data[i][j];
        return result;
    }

    // 5Ô∏è‚É£ –ö–æ–Ω‚Äô—é–Ω–∫—Ü—ñ—è (–ª–æ–≥—ñ—á–Ω–µ "—ñ")
    BoolMatrix operator&(const BoolMatrix &B) const {
        BoolMatrix result(n, m);
        for (int i = 0; i < n; i++)
            for (int j = 0; j < m; j++)
                result.data[i][j] = data[i][j] && B.data[i][j];
        return result;
    }

    // 6Ô∏è‚É£ –Ü–Ω–≤–µ—Ä—Å—ñ—è (–ª–æ–≥—ñ—á–Ω–µ "–Ω–µ")
    BoolMatrix operator~() const {
        BoolMatrix result(n, m);
        for (int i = 0; i < n; i++)
            for (int j = 0; j < m; j++)
                result.data[i][j] = !data[i][j];
        return result;
    }

    // 7Ô∏è‚É£ –ü—Ä–∏—Å–≤–æ—î–Ω–Ω—è
    BoolMatrix& operator=(const BoolMatrix &B) {
        if (this != &B) {
            n = B.n;
            m = B.m;
            data = B.data;
        }
        return *this;
    }

    // 8Ô∏è‚É£ –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –æ–¥–∏–Ω–∏—Ü—å
    int countOnes() const {
        int count = 0;
        for (int i = 0; i < n; i++)
            for (int j = 0; j < m; j++)
                if (data[i][j]) count++;
        return count;
    }

    // 9Ô∏è‚É£ –õ–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ—ñ—á–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ä—è–¥–∫—ñ–≤
    void sortLexicographically() {
        sort(data.begin(), data.end());
    }
};

// üîπ –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –∑–º—ñ–Ω—é—î –º–∞—Ç—Ä–∏—Ü—é –∑–∞ —Ñ–æ—Ä–º—É–ª–æ—é A = A ‚à® B
void updateMatrix(BoolMatrix &A, const BoolMatrix &B) {
    A = A | B;
}

int main() {
    // 1Ô∏è‚É£ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Ç—Ä–∏—Ü—å —Ä—ñ–∑–Ω–∏–º–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞–º–∏
    BoolMatrix A(3, 3);       // –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    BoolMatrix B(3, 3);
    BoolMatrix C;             // –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º

    // 2Ô∏è‚É£ –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –º–∞—Ç—Ä–∏—Ü—å
    A.set(0,0,1); A.set(1,1,1); A.set(2,2,1);
    B.set(0,1,1); B.set(1,2,1); B.set(2,0,1);

    cout << "–ú–∞—Ç—Ä–∏—Ü—è A:\n"; A.print();
    cout << "–ú–∞—Ç—Ä–∏—Ü—è B:\n"; B.print();

    // 3Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∏–∑‚Äô—é–Ω–∫—Ü—ñ—ó (–ª–æ–≥—ñ—á–Ω–µ ‚Äú–∞–±–æ‚Äù)
    C = A | B;
    cout << "A ‚à® B (A | B):\n"; C.print();

    // 4Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω‚Äô—é–Ω–∫—Ü—ñ—ó (–ª–æ–≥—ñ—á–Ω–µ ‚Äú—ñ‚Äù)
    C = A & B;
    cout << "A ‚àß B (A & B):\n"; C.print();

    // 5Ô∏è‚É£ –Ü–Ω–≤–µ—Ä—Å—ñ—è
    C = ~A;
    cout << "–Ü–Ω–≤–µ—Ä—Å—ñ—è –º–∞—Ç—Ä–∏—Ü—ñ A (~A):\n"; C.print();

    // 6Ô∏è‚É£ –ü—Ä–∏—Å–≤–æ—î–Ω–Ω—è
    C = B;
    cout << "C –ø—ñ—Å–ª—è –ø—Ä–∏—Å–≤–æ—î–Ω–Ω—è C = B:\n"; C.print();

    // 7Ô∏è‚É£ –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –æ–¥–∏–Ω–∏—Ü—å
    cout << "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–¥–∏–Ω–∏—Ü—å —É –º–∞—Ç—Ä–∏—Ü—ñ A: " << A.countOnes() << endl;

    // 8Ô∏è‚É£ –õ–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ—ñ—á–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
    cout << "\nB –¥–æ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è:\n"; B.print();
    B.sortLexicographically();
    cout << "B –ø—ñ—Å–ª—è –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ—ñ—á–Ω–æ–≥–æ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è:\n"; B.print();

    // 9Ô∏è‚É£ –§–æ—Ä–º—É–ª–∞ A = A ‚à® B
    cout << "A –ø–µ—Ä–µ–¥ A = A ‚à® B:\n"; A.print();
    updateMatrix(A, B);
    cout << "A –ø—ñ—Å–ª—è A = A ‚à® B:\n"; A.print();

    return 0;
}
